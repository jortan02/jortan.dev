[
	{
	  "question": "What is Jordan's educational background?",
	  "answer": "Jordan earned both his bachelor's and master's degrees in Computer Science from the University of Utah.",
	  "contexts": []
	},
	{
	  "question": "What kind of roles is Jordan interested in?",
	  "answer": "Jordan is interested in roles involving machine learning, full-stack development, and research-driven product work.",
	  "contexts": []
	},
	{
	  "question": "How can I get in touch with Jordan?",
	  "answer": "The best way to contact Jordan is through his LinkedIn profile.",
	  "contexts": []
	},
	{
	  "question": "What was the final test accuracy for the Convolutional Neural Network project?",
	  "answer": "The project achieved a test accuracy of 68.7% on the CIFAR-10 dataset, surpassing the benchmark of 62%.",
	  "contexts": [
		"Project: Convolutional Neural Network\n\nSection: Key Achievements\n\n- Achieved 68.7% test accuracy on CIFAR-10\n- Surpassed the benchmark accuracy of 62%\n- Built all core CNN components from first principles\n- Successfully trained a multi-layer model using only NumPy"
	  ]
	},
	{
	  "question": "In the Selective Unlearning project, how was the ensemble model structured?",
	  "answer": "The architecture used was an ensemble of five ResNet-18 models, each with 11.4M parameters, which was compared against a single monolithic ResNet-152 model.",
	  "contexts": [
		"Project: Selective Unlearning of Training Data Without Complete Retraining\n\nSection: Technical Implementation\n\n- Architecture: Ensemble of five ResNet-18 models (11.4M parameters each)\n- Baseline Comparison: Single ResNet-152 (58.5M parameters) without unlearning\n- Training Strategy:\n  - Models trained on chunks of CIFAR-10 in sequence\n  - Each model receives a random subset of each chunk\n  - When data must be unlearned, models that trained on it are marked invalid\n  - Invalid models are replaced and retrained on the latest available data\n- Evaluation:\n  - Validation accuracy and loss tracked after each training phase\n  - Visualizations highlight ensemble progress vs. baseline"
	  ]
	},
	{
	  "question": "What networking protocol was used for the TankWars game?",
	  "answer": "The TankWars game used a TCP-based client-server model to handle game synchronization and communication between the server and multiple clients.",
	  "contexts": [
		"Project: TankWars\n\nSection: Technical Implementation\n\n- Followed MVC architecture for modular, maintainable code\n- Built a TCP-based client-server model for game synchronization\n- Server maintained the authoritative game state and validated player actions\n- Clients rendered game state and sent input events to the server\n- Designed a synchronized game loop and entity tracking system\n- Implemented event-driven logic for collisions and scorekeeping\n- Serialized game events and world updates using JSON\n- Developed the game interface with WinForms for real-time rendering"
	  ]
	},
	{
	  "question": "What technologies were used in the Drawing App?",
	  "answer": "The Drawing App was built with Kotlin for the Android platform and used Firebase for user authentication and real-time database capabilities. It also incorporated C++ for image augmentation and used Jetpack components for UI and state management.",
	  "contexts": [
		"Project: Drawing App\n\nSection: Technical Implementation\n\n- Built on MVVM architecture to ensure scalability and testability\n- Integrated Firebase Authentication for secure user access\n- Implemented custom drawing tools and color selection logic\n- Incorporated native C++ functions for image processing\n- Stored drawings as image files locally and in the cloud\n- Supported collaborative drawing using Firebase Realtime Database\n- Managed UI state and data flow using Android Jetpack components"
	  ]
	},
	{
	  "question": "How much was the RMSE reduced in the Data-centric ML Regression project?",
	  "answer": "The project achieved a 99.99% improvement in RMSE, reducing it from 2,049,382 to 4.9 through advanced data cleaning and feature engineering.",
	  "contexts": [
		"Project: Data-centric ML Regression\n\nSection: Key Achievements\n\n- Reduced RMSE from 2,049,382 to 4.9 (99.99% improvement)\n- Implemented robust data cleaning pipelines\n- Developed automated feature engineering processes\n- Created reproducible data transformation workflows"
	  ]
	},
	{
	  "question": "What is Jordan's opinion on the best programming language?",
	  "answer": "I do not have information about Jordan's personal opinions on programming languages. I can only provide details about the projects in his portfolio.",
	  "contexts": []
	},
	{
	  "question": "Can you provide a link to the TankWars game?",
	  "answer": "I do not have a direct download link for the TankWars game. However, you can find more information about its implementation in the portfolio.",
	  "contexts": []
	}
  ]
